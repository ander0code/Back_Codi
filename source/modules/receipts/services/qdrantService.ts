// services/qdrantService.ts
import { QdrantClient } from '@qdrant/js-client-rest';
import { OpenAIEmbeddings } from '@langchain/openai';

const qdrantClient = new QdrantClient({ url: 'http://168.138.135.113:6333' });

const SUPERMERCADO_TO_COLLECTION: Record<string, string> = {
  'wong': 'wong',
  'vivanda': 'vivanda',
  'tottus': 'tottus',
  'tottus s.a.': 'tottus',
  'plazavea': 'plazavea',
  'plaza vea': 'plazavea',
  'metro': 'metro',
  'flora y fauna': 'flora_y_fauna',
  'flora & fauna': 'flora_y_fauna',
  'flora_y_fauna': 'flora_y_fauna'
};    


const embeddings = new OpenAIEmbeddings({
  openAIApiKey: process.env.OPENAI_API_KEY,
  modelName: 'text-embedding-3-small',
  dimensions: 1536, 
});

export const buscarProductoEnQdrant = async (
  nombreProducto: string,
  supermercado: string
): Promise<{
  co2e_estimado: number;
  huella_categoria: number;
  categoria: string;
} | null> => {
  try {
    console.log(`üîç ===== B√öSQUEDA QDRANT =====`);
    console.log(`üîç Producto: "${nombreProducto}"`);
    console.log(`üè™ Supermercado: "${supermercado}"`);
    
    const normalizedName = supermercado.toLowerCase().trim();
    console.log(`üè™ Nombre normalizado: "${normalizedName}"`);
    
    const collection = SUPERMERCADO_TO_COLLECTION[normalizedName];
    console.log(`üìÇ Colecci√≥n mapeada: "${collection}"`);

    if (!collection) {
      console.error(`‚ùå Supermercado no reconocido: ${supermercado}`);
      console.log(`üìã Supermercados disponibles:`, Object.keys(SUPERMERCADO_TO_COLLECTION));
      throw new Error(`Nombre de supermercado no reconocido: ${supermercado}`);
    }

    console.log(`üî¢ Generando vector para: "${nombreProducto}"`);
    const vector = await obtenerVectorDelProducto(nombreProducto);
    console.log(`üî¢ Vector generado con ${vector.length} dimensiones`);

    console.log(`üöÄ Ejecutando b√∫squeda en colecci√≥n: ${collection}`);
    const searchResult = await qdrantClient.search(collection, {
      vector: vector,
      limit: 5,
      with_payload: true,
    });

    console.log(`üìä Resultados encontrados: ${searchResult.length}`);

    if (searchResult.length === 0) {
      console.log(`‚ùå No se encontraron resultados para: "${nombreProducto}"`);
      return null;
    }    // Log de todos los resultados con an√°lisis detallado del payload
    searchResult.forEach((result, index) => {
      console.log(`üìç Resultado ${index + 1}:`);
      console.log(`   - Score: ${result.score}`);
      console.log(`   - Payload completo:`, JSON.stringify(result.payload, null, 2));
      console.log(`   - Campos disponibles:`, Object.keys(result.payload || {}));
    });

    const mejorResultado = searchResult[0];
    const payload = mejorResultado.payload as any;

    console.log(`üîç ===== AN√ÅLISIS DETALLADO DEL PAYLOAD =====`);
    console.log(`üîç Payload raw:`, JSON.stringify(payload, null, 2));
    console.log(`üîç Campo 'categoria_principal':`, payload.categoria_principal);
    console.log(`üîç Campo 'categoria':`, payload.categoria);
    console.log(`üîç Campo 'category':`, payload.category);
    console.log(`üîç Campo 'tipo':`, payload.tipo);
    console.log(`üîç ===== FIN AN√ÅLISIS PAYLOAD =====`);

    // Intentar m√∫ltiples campos posibles para cada dato
    const resultado = {
      co2e_estimado: payload.co2_estimado || payload.co2e_estimado || payload.huella_co2 || 0,
      huella_categoria: payload.huella_categoria || payload.co2_categoria || payload.co2_estimado || payload.co2e_estimado || 0,
      categoria: payload.categoria_principal || payload.categoria || payload.category || payload.tipo || 'Sin categor√≠a',
    };

    // Validar que la categor√≠a no est√© vac√≠a
    if (!resultado.categoria || resultado.categoria.trim() === '' || resultado.categoria === 'Sin categor√≠a') {
      console.log(`‚ö†Ô∏è Categor√≠a no v√°lida detectada, intentando campos alternativos...`);
      
      // Intentar campos alternativos
      const categoriasAlternativas = [
        payload.tipo_producto,
        payload.seccion,
        payload.departamento,
        payload.grupo,
        payload.linea
      ].filter(Boolean);
      
      if (categoriasAlternativas.length > 0) {
        resultado.categoria = categoriasAlternativas[0];
        console.log(`üîÑ Categor√≠a alternativa encontrada: "${resultado.categoria}"`);
      }
    }

    console.log(`‚úÖ Mejor resultado seleccionado:`, resultado);
    console.log(`‚úÖ ===== FIN B√öSQUEDA QDRANT =====`);

    return resultado;
  } catch (error) {
    console.error('‚ùå ===== ERROR EN B√öSQUEDA QDRANT =====');
    console.error('‚ùå Error:', error);
    console.error('‚ùå Stack:', error.stack);
    return null;
  }
};

const obtenerVectorDelProducto = async (nombreProducto: string): Promise<number[]> => {
  console.log(`üî¢ Generando embedding con text-embedding-3-small para: "${nombreProducto}"`);
  try {
    const vector = await embeddings.embedQuery(nombreProducto);
    console.log(`‚úÖ Embedding text-embedding-3-small generado exitosamente con ${vector.length} dimensiones`);
    return vector;
  } catch (error) {
    console.error(`‚ùå Error generando embedding con text-embedding-3-small:`, error);
    throw error;
  }
};